{"title":"07 - FILES","markdown":{"yaml":{"title":"07 - FILES"},"headingText":"Study Guide for Python Programming: Unit 07 - Files","containsRefs":false,"markdown":"\n\n\n:::: {layout=\"[ 40, 60 ]\"}\n\n::: {#first-column}\n![](Babe1.jpg)\n\nBabe says that files are persistent storage!\n:::\n\n::: {#second-column}\n\n### File Quick Ref\n\nHere's a summary of the syntax for the specified Python file functions:\n\n- **open()**\n  - Opens a file and returns a file object.\n  - Syntax: `open(file, mode='r', buffering=-1, encoding=None, errors=None, newline=None, closefd=True, opener=None)`\n  - The `mode` parameter specifies the mode in which the file is opened ('r' for reading, 'w' for writing, etc.).\n  - Other parameters like `encoding`, `errors`, and `newline` are optional and allow further customization of file handling.\n\n- **read()**\n  - Reads the entire file or a specified number of characters from the file.\n  - Syntax: `file.read(size=-1)`\n  - `size` is an optional parameter that specifies the number of characters to read. If omitted or negative, the entire content of the file will be read.\n\n- **readlines()**\n  - Reads the entire file and returns a list of strings, each representing one line of the file.\n  - Syntax: `file.readlines(hint=-1)`\n  - The `hint` parameter is optional and can be used to control the number of lines read. If the total number of characters read is approximately `hint`, reading stops.\n\n- **write()**\n  - Writes a specified string to the file.\n  - Syntax: `file.write(string)`\n  - This function writes the `string` to the file, returning the number of characters written.\n\n:::\n\n::::\n\n## Key Concepts\n\n### File Handling Basics\n- **Persistence Layer**: Files allow for data storage beyond the runtime of a program.\n- **File Operations**: Mainly include reading from and writing to files.\n- **File Handle**: A variable created by opening a file, used to perform operations on the file.\n\n### Reading from a File\n- **Two Methods**:\n  1. **Read All at Once**: Using `handle.read()` inside a `with open(filename, 'r') as handle` block.\n  2. **Read Line by Line**: Looping over `handle.readlines()` to process each line individually.\n\n### Writing to a File\n- **Write Mode (`'w'`)**: Overwrites the file or creates a new one if it doesn't exist.\n- **Append Mode (`'a'`)**: Adds content to the end of the file without overwriting existing content.\n\n### File Paths\n- **Relative Path**: Specifies a file location relative to the current directory.\n- **Absolute Path**: Specifies the exact file location on the filesystem from the root directory.\n\n### Error Handling\n- **Try-Except Block**: Essential for handling I/O operations to manage exceptions like `FileNotFoundError`.\n\n### Practical Applications\n- **Examples**: Programs that save text messages, read and calculate average grades, calorie lookups in a data file, and a spell checker.\n\n## Practice Questions\n\n1. What does `with open(file,'w') as f` do in a Python script?\n   - A. Opens the file in write mode and creates a file handle named `f`.\n   - B. Opens the file in read mode and creates a file handle named `f`.\n   - C. Deletes the file and creates a new empty file.\n   - D. Reads the entire content of the file into `f`.\n\n2. In file handling, what is the purpose of the `try...except` block?\n   - A. To check if a file exists before trying to open it.\n   - B. To ensure that a file is closed after reading or writing.\n   - C. To handle errors that occur during file operations.\n   - D. To improve the performance of file reading/writing.\n\n3. Which of the following is not an example of secondary (persistent) memory?\n   - A. Flash Memory\n   - B. Hard Disk Drive (HDD)\n   - C. Random-Access Memory (RAM)\n   - D. Solid State Disk (SSD)\n\n4. What is wrong with the following code: `with open(file,'w'): file.write(\"Hello\")`?\n   - A. No file handle\n   - B. Cannot write - file opened for reading\n   - C. File `a.txt` does not exist\n   - D. Nothing is wrong!\n\n5. When is an absolute path required in file handling in Python?\n   - A. When the file is in the current working directory.\n   - B. When the file is in a different directory than the current one.\n   - C. Only when the file is on a different physical drive.\n   - D. Absolute paths are never required in Python.\n\n---\n\n### Correct Answers and Explanations\n\n1. **Answer: A. Opens the file in write mode and creates a file handle named `f`.**\n   - **Explanation**: The `with open()` statement opens a file in the specified mode ('w' for write in this case) and assigns a handle (`f`) for file operations.\n\n2. **Answer: C. To handle errors that occur during file operations.**\n   - **Explanation**: The `try...except` block is used to catch and handle exceptions, like `FileNotFoundError`, that might occur during file operations.\n\n3. **Answer: C. Random-Access Memory (RAM)**\n   - **Explanation**: RAM is a type of primary memory, not secondary (persistent) memory. Flash Memory, HDD, and SSD are examples of secondary memory.\n\n4. **Answer: A. No file handle**\n   - **Explanation**: The correct syntax should be `with open(file,'w') as f: f.write(\"Hello\")`. The file handle (`f`) is missing in the given code.\n\n5. **Answer: B. When the file is in a different directory than the current one.**\n   - **Explanation**: Absolute paths are needed when accessing files that are not in the current working directory.\n","srcMarkdownNoYaml":"\n\n# Study Guide for Python Programming: Unit 07 - Files\n\n:::: {layout=\"[ 40, 60 ]\"}\n\n::: {#first-column}\n![](Babe1.jpg)\n\nBabe says that files are persistent storage!\n:::\n\n::: {#second-column}\n\n### File Quick Ref\n\nHere's a summary of the syntax for the specified Python file functions:\n\n- **open()**\n  - Opens a file and returns a file object.\n  - Syntax: `open(file, mode='r', buffering=-1, encoding=None, errors=None, newline=None, closefd=True, opener=None)`\n  - The `mode` parameter specifies the mode in which the file is opened ('r' for reading, 'w' for writing, etc.).\n  - Other parameters like `encoding`, `errors`, and `newline` are optional and allow further customization of file handling.\n\n- **read()**\n  - Reads the entire file or a specified number of characters from the file.\n  - Syntax: `file.read(size=-1)`\n  - `size` is an optional parameter that specifies the number of characters to read. If omitted or negative, the entire content of the file will be read.\n\n- **readlines()**\n  - Reads the entire file and returns a list of strings, each representing one line of the file.\n  - Syntax: `file.readlines(hint=-1)`\n  - The `hint` parameter is optional and can be used to control the number of lines read. If the total number of characters read is approximately `hint`, reading stops.\n\n- **write()**\n  - Writes a specified string to the file.\n  - Syntax: `file.write(string)`\n  - This function writes the `string` to the file, returning the number of characters written.\n\n:::\n\n::::\n\n## Key Concepts\n\n### File Handling Basics\n- **Persistence Layer**: Files allow for data storage beyond the runtime of a program.\n- **File Operations**: Mainly include reading from and writing to files.\n- **File Handle**: A variable created by opening a file, used to perform operations on the file.\n\n### Reading from a File\n- **Two Methods**:\n  1. **Read All at Once**: Using `handle.read()` inside a `with open(filename, 'r') as handle` block.\n  2. **Read Line by Line**: Looping over `handle.readlines()` to process each line individually.\n\n### Writing to a File\n- **Write Mode (`'w'`)**: Overwrites the file or creates a new one if it doesn't exist.\n- **Append Mode (`'a'`)**: Adds content to the end of the file without overwriting existing content.\n\n### File Paths\n- **Relative Path**: Specifies a file location relative to the current directory.\n- **Absolute Path**: Specifies the exact file location on the filesystem from the root directory.\n\n### Error Handling\n- **Try-Except Block**: Essential for handling I/O operations to manage exceptions like `FileNotFoundError`.\n\n### Practical Applications\n- **Examples**: Programs that save text messages, read and calculate average grades, calorie lookups in a data file, and a spell checker.\n\n## Practice Questions\n\n1. What does `with open(file,'w') as f` do in a Python script?\n   - A. Opens the file in write mode and creates a file handle named `f`.\n   - B. Opens the file in read mode and creates a file handle named `f`.\n   - C. Deletes the file and creates a new empty file.\n   - D. Reads the entire content of the file into `f`.\n\n2. In file handling, what is the purpose of the `try...except` block?\n   - A. To check if a file exists before trying to open it.\n   - B. To ensure that a file is closed after reading or writing.\n   - C. To handle errors that occur during file operations.\n   - D. To improve the performance of file reading/writing.\n\n3. Which of the following is not an example of secondary (persistent) memory?\n   - A. Flash Memory\n   - B. Hard Disk Drive (HDD)\n   - C. Random-Access Memory (RAM)\n   - D. Solid State Disk (SSD)\n\n4. What is wrong with the following code: `with open(file,'w'): file.write(\"Hello\")`?\n   - A. No file handle\n   - B. Cannot write - file opened for reading\n   - C. File `a.txt` does not exist\n   - D. Nothing is wrong!\n\n5. When is an absolute path required in file handling in Python?\n   - A. When the file is in the current working directory.\n   - B. When the file is in a different directory than the current one.\n   - C. Only when the file is on a different physical drive.\n   - D. Absolute paths are never required in Python.\n\n---\n\n### Correct Answers and Explanations\n\n1. **Answer: A. Opens the file in write mode and creates a file handle named `f`.**\n   - **Explanation**: The `with open()` statement opens a file in the specified mode ('w' for write in this case) and assigns a handle (`f`) for file operations.\n\n2. **Answer: C. To handle errors that occur during file operations.**\n   - **Explanation**: The `try...except` block is used to catch and handle exceptions, like `FileNotFoundError`, that might occur during file operations.\n\n3. **Answer: C. Random-Access Memory (RAM)**\n   - **Explanation**: RAM is a type of primary memory, not secondary (persistent) memory. Flash Memory, HDD, and SSD are examples of secondary memory.\n\n4. **Answer: A. No file handle**\n   - **Explanation**: The correct syntax should be `with open(file,'w') as f: f.write(\"Hello\")`. The file handle (`f`) is missing in the given code.\n\n5. **Answer: B. When the file is in a different directory than the current one.**\n   - **Explanation**: Absolute paths are needed when accessing files that are not in the current working directory.\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"markdown"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"output-file":"Files.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","theme":"spacelab","title":"07 - FILES"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}
{"title":"08 - LISTS","markdown":{"yaml":{"title":"08 - LISTS"},"headingText":"Python Programming Study Guide: Lists as Mutable Sequence Types","containsRefs":false,"markdown":"\n\n\n:::: {layout=\"[ 40, 60 ]\"}\n\n::: {#first-column}\n![](Bert1.jpg)\n\nBert's contempt for Lists knows no bounds!\n:::\n\n::: {#second-column}\n\n### List Syntax\n\nBert made a summary of the syntax for each of the Python list functions in the study guide:\n\n- `append()`\n  - Adds an element to the end of the list.\n  - Syntax: `list.append(element)`\n\n- `index()`\n  - Returns the index of the first occurrence of the specified element.\n  - Syntax: `list.index(element, start, end)`\n  - The `start` and `end` parameters are optional and specify the search range.\n\n- `insert()`\n  - Inserts an element at the specified position.\n  - Syntax: `list.insert(index, element)`\n\n- `pop()`\n  - Removes and returns the element at the specified position.\n  - Syntax: `list.pop(index)`\n  - If the index is not specified, `pop()` removes and returns the last element.\n\n- `remove()`\n  - Removes the first occurrence of the specified element.\n  - Syntax: `list.remove(element)`\n\n- `reverse()`\n  - Reverses the elements of the list in place.\n  - Syntax: `list.reverse()`\n\n- `count()`\n  - Returns the number of times the specified element appears in the list.\n  - Syntax: `list.count(element)`\n\n:::\n\n::::\n\n## Key Concepts\n\n### Lists as Mutable Sequence Types\n- **Mutable**: Lists in Python can be changed after they are created. This is in contrast to strings, which are immutable.\n- **Sequence Type**: A list is an ordered collection of items.\n\n### Indexing and Slicing\n- **Indexing**: Access an individual element of a list using its index, e.g., `list[0]` for the first item.\n- **Slice Notation**: Extract a subset of a list, e.g., `list[start:stop]` extracts elements from index `start` to `stop-1`.\n\n### List Functions and Operations\n- **Add**: `append(item)` adds an item to the end, `insert(index, item)` adds an item at a specified index.\n- **Remove**: `remove(item)` removes the first occurrence of an item.\n- **Update**: Directly assign a new value to a list element, e.g., `list[index] = new_value`.\n- **Find**: Use `index(item)` to find the index of the first occurrence of an item.\n\n### Common Patterns for List Management\n- **Enumeration and Aggregates**: Using loops to iterate over lists, and using functions like `len()`, `max()`, `min()` to aggregate data.\n- **List Mutation**: Changing, adding, or removing elements in a list.\n- **Combining Lists**: Use the `+` operator to concatenate two lists.\n\n## Multiple Choice Questions\n\n1. For `x = [0,1,2,3,4,5]`, what is `x[2:4]`?\n   - A. [2,3]\n   - B. [1,2,3]\n   - C. [1,2]\n   - D. [2,3,4,5]\n\n2. How do you add a new element at the end of a list named `myList`?\n   - A. `myList.append(newElement)`\n   - B. `myList.insert(len(myList), newElement)`\n   - C. `myList.add(newElement)`\n   - D. `myList.put(newElement)`\n\n3. Which operation will combine two lists `list1` and `list2` into a new list `list3`?\n   - A. `list3 = list1 + list2`\n   - B. `list3 = list1.append(list2)`\n   - C. `list3 = list1.extend(list2)`\n   - D. `list3 = combine(list1, list2)`\n\n4. What does `grades[:2]` return if `grades = ['A', 'B+','A','C+','B-']`?\n   - A. ['A', 'B+']\n   - B. ['B+', 'A']\n   - C. ['A', 'B+', 'A']\n   - D. The first two characters of the first item in `grades`\n\n5. What is the result of the following operations on the list `items = ['a','b','c','d']`?\n- A. ['a','b','c','d', 'w']\n- B. ['a','b','d', 'w']\n- C. ['x', 'b', 'd', 'w']\n- D. ['i','dont','know']\n\n\n \n\n6. **What is the output of the following code?**\n   \n   ```python\n   myList = [4, 2, 8, 6]\n   myList[2] = 5\n   print(myList)\n   ```\n\n   - A. `[4, 2, 5, 6]`\n   - B. `[4, 2, 8, 5]`\n   - C. `[4, 5, 8, 6]`\n   - D. `[5, 2, 8, 6]`\n\n7. **What is the output of the following code?**\n   \n   ```python\n   x = [\"apple\", \"banana\", \"cherry\"]\n   x.remove(\"banana\")\n   print(x)\n   ```\n\n   - A. `[\"apple\", \"banana\"]`\n   - B. `[\"apple\", \"cherry\"]`\n   - C. `[\"banana\", \"cherry\"]`\n   - D. `[\"apple\", \"banana\", \"cherry\"]`\n\n8. **What will be the length of the list after executing the following code?**\n   \n   ```python\n   x = [1, 2, 3, 4, 5]\n   x.append(6)\n   x.extend([7, 8])\n   ```\n\n   - A. `5`\n   - B. `6`\n   - C. `8`\n   - D. `10`\n\n9. **What is the result of the following list slicing operation?**\n   \n   ```python\n   myList = [10, 20, 30, 40, 50]\n   print(myList[1:4])\n   ```\n\n   - A. `[10, 20, 30]`\n   - B. `[20, 30, 40]`\n   - C. `[30, 40, 50]`\n   - D. `[20, 30, 40, 50]`\n\n10. **Which method is used to add an element at a specific index in a list?**\n    \n    - A. `append()`\n    - B. `insert()`\n    - C. `extend()`\n    - D. `add()`\n\n\n### Correct Answers and Explanations\n\n1. **Answer: A. [2,3]**\n- **Explanation**: The slice `x[2:4]` extracts elements from index 2 up to but not including index 4, resulting in `[2, 3]`.\n\n2. **Answer: A. `myList.append(newElement)`**\n- **Explanation**: `append()` is the correct method to add an element to the end of a list. The other options are either incorrect methods or overly complicated.\n\n3. **Answer: A. `list3 = list1 + list2`**\n- **Explanation**: The `+` operator concatenates two lists. `append()` and `extend()` methods modify the list in place and do not return a new list.\n\n4. **Answer: A. ['A', 'B+']**\n- **Explanation**: The slice `grades[:2]` returns the first two elements of the list, which are ['A', 'B+'].\n\n5. **Answer: C. ['x', 'b', 'd', 'w']**\n- **Explanation**: After each operation, the list changes as follows:\n  - `items.append('w')` -> ['a','b','c','d', 'w']\n  - `items.remove('c')` -> ['a','b','d', 'w']\n  - `items.insert(0,'x')` -> ['x', 'a', 'b', 'd', 'w']\n  - `items.pop(1)` -> ['x', 'b', 'd', 'w']\n  \n\n\n6. **Answer: A. `[4, 2, 5, 6]`**\n   \n   **Explanation**: The code changes the element at index 2 (third element) from 8 to 5.\n\n7. **Answer: B. `[\"apple\", \"cherry\"]`**\n   \n   **Explanation**: The `remove()` method removes the first occurrence of the element \"banana\" from the list.\n\n8. **Answer: C. `8`**\n   \n   **Explanation**: The `append()` method adds one element, and `extend()` adds three more elements, making the total length 8.\n\n9. **Answer: B. `[20, 30, 40]`**\n   \n   **Explanation**: The slice `[1:4]` includes elements from index 1 to 3 (20, 30, 40).\n\n10. **Answer: B. `insert()`**\n    \n    **Explanation**: The `insert()` method is used to add an element at a specified index. `append()` adds to the end, `extend()` adds multiple elements, and `add()` is not a list method.\n```\n\nThis format should correctly render in Quarto, displaying both the questions and their answers in a structured and readable format.\n","srcMarkdownNoYaml":"\n\n# Python Programming Study Guide: Lists as Mutable Sequence Types\n\n:::: {layout=\"[ 40, 60 ]\"}\n\n::: {#first-column}\n![](Bert1.jpg)\n\nBert's contempt for Lists knows no bounds!\n:::\n\n::: {#second-column}\n\n### List Syntax\n\nBert made a summary of the syntax for each of the Python list functions in the study guide:\n\n- `append()`\n  - Adds an element to the end of the list.\n  - Syntax: `list.append(element)`\n\n- `index()`\n  - Returns the index of the first occurrence of the specified element.\n  - Syntax: `list.index(element, start, end)`\n  - The `start` and `end` parameters are optional and specify the search range.\n\n- `insert()`\n  - Inserts an element at the specified position.\n  - Syntax: `list.insert(index, element)`\n\n- `pop()`\n  - Removes and returns the element at the specified position.\n  - Syntax: `list.pop(index)`\n  - If the index is not specified, `pop()` removes and returns the last element.\n\n- `remove()`\n  - Removes the first occurrence of the specified element.\n  - Syntax: `list.remove(element)`\n\n- `reverse()`\n  - Reverses the elements of the list in place.\n  - Syntax: `list.reverse()`\n\n- `count()`\n  - Returns the number of times the specified element appears in the list.\n  - Syntax: `list.count(element)`\n\n:::\n\n::::\n\n## Key Concepts\n\n### Lists as Mutable Sequence Types\n- **Mutable**: Lists in Python can be changed after they are created. This is in contrast to strings, which are immutable.\n- **Sequence Type**: A list is an ordered collection of items.\n\n### Indexing and Slicing\n- **Indexing**: Access an individual element of a list using its index, e.g., `list[0]` for the first item.\n- **Slice Notation**: Extract a subset of a list, e.g., `list[start:stop]` extracts elements from index `start` to `stop-1`.\n\n### List Functions and Operations\n- **Add**: `append(item)` adds an item to the end, `insert(index, item)` adds an item at a specified index.\n- **Remove**: `remove(item)` removes the first occurrence of an item.\n- **Update**: Directly assign a new value to a list element, e.g., `list[index] = new_value`.\n- **Find**: Use `index(item)` to find the index of the first occurrence of an item.\n\n### Common Patterns for List Management\n- **Enumeration and Aggregates**: Using loops to iterate over lists, and using functions like `len()`, `max()`, `min()` to aggregate data.\n- **List Mutation**: Changing, adding, or removing elements in a list.\n- **Combining Lists**: Use the `+` operator to concatenate two lists.\n\n## Multiple Choice Questions\n\n1. For `x = [0,1,2,3,4,5]`, what is `x[2:4]`?\n   - A. [2,3]\n   - B. [1,2,3]\n   - C. [1,2]\n   - D. [2,3,4,5]\n\n2. How do you add a new element at the end of a list named `myList`?\n   - A. `myList.append(newElement)`\n   - B. `myList.insert(len(myList), newElement)`\n   - C. `myList.add(newElement)`\n   - D. `myList.put(newElement)`\n\n3. Which operation will combine two lists `list1` and `list2` into a new list `list3`?\n   - A. `list3 = list1 + list2`\n   - B. `list3 = list1.append(list2)`\n   - C. `list3 = list1.extend(list2)`\n   - D. `list3 = combine(list1, list2)`\n\n4. What does `grades[:2]` return if `grades = ['A', 'B+','A','C+','B-']`?\n   - A. ['A', 'B+']\n   - B. ['B+', 'A']\n   - C. ['A', 'B+', 'A']\n   - D. The first two characters of the first item in `grades`\n\n5. What is the result of the following operations on the list `items = ['a','b','c','d']`?\n- A. ['a','b','c','d', 'w']\n- B. ['a','b','d', 'w']\n- C. ['x', 'b', 'd', 'w']\n- D. ['i','dont','know']\n\n\n \n\n6. **What is the output of the following code?**\n   \n   ```python\n   myList = [4, 2, 8, 6]\n   myList[2] = 5\n   print(myList)\n   ```\n\n   - A. `[4, 2, 5, 6]`\n   - B. `[4, 2, 8, 5]`\n   - C. `[4, 5, 8, 6]`\n   - D. `[5, 2, 8, 6]`\n\n7. **What is the output of the following code?**\n   \n   ```python\n   x = [\"apple\", \"banana\", \"cherry\"]\n   x.remove(\"banana\")\n   print(x)\n   ```\n\n   - A. `[\"apple\", \"banana\"]`\n   - B. `[\"apple\", \"cherry\"]`\n   - C. `[\"banana\", \"cherry\"]`\n   - D. `[\"apple\", \"banana\", \"cherry\"]`\n\n8. **What will be the length of the list after executing the following code?**\n   \n   ```python\n   x = [1, 2, 3, 4, 5]\n   x.append(6)\n   x.extend([7, 8])\n   ```\n\n   - A. `5`\n   - B. `6`\n   - C. `8`\n   - D. `10`\n\n9. **What is the result of the following list slicing operation?**\n   \n   ```python\n   myList = [10, 20, 30, 40, 50]\n   print(myList[1:4])\n   ```\n\n   - A. `[10, 20, 30]`\n   - B. `[20, 30, 40]`\n   - C. `[30, 40, 50]`\n   - D. `[20, 30, 40, 50]`\n\n10. **Which method is used to add an element at a specific index in a list?**\n    \n    - A. `append()`\n    - B. `insert()`\n    - C. `extend()`\n    - D. `add()`\n\n\n### Correct Answers and Explanations\n\n1. **Answer: A. [2,3]**\n- **Explanation**: The slice `x[2:4]` extracts elements from index 2 up to but not including index 4, resulting in `[2, 3]`.\n\n2. **Answer: A. `myList.append(newElement)`**\n- **Explanation**: `append()` is the correct method to add an element to the end of a list. The other options are either incorrect methods or overly complicated.\n\n3. **Answer: A. `list3 = list1 + list2`**\n- **Explanation**: The `+` operator concatenates two lists. `append()` and `extend()` methods modify the list in place and do not return a new list.\n\n4. **Answer: A. ['A', 'B+']**\n- **Explanation**: The slice `grades[:2]` returns the first two elements of the list, which are ['A', 'B+'].\n\n5. **Answer: C. ['x', 'b', 'd', 'w']**\n- **Explanation**: After each operation, the list changes as follows:\n  - `items.append('w')` -> ['a','b','c','d', 'w']\n  - `items.remove('c')` -> ['a','b','d', 'w']\n  - `items.insert(0,'x')` -> ['x', 'a', 'b', 'd', 'w']\n  - `items.pop(1)` -> ['x', 'b', 'd', 'w']\n  \n\n\n6. **Answer: A. `[4, 2, 5, 6]`**\n   \n   **Explanation**: The code changes the element at index 2 (third element) from 8 to 5.\n\n7. **Answer: B. `[\"apple\", \"cherry\"]`**\n   \n   **Explanation**: The `remove()` method removes the first occurrence of the element \"banana\" from the list.\n\n8. **Answer: C. `8`**\n   \n   **Explanation**: The `append()` method adds one element, and `extend()` adds three more elements, making the total length 8.\n\n9. **Answer: B. `[20, 30, 40]`**\n   \n   **Explanation**: The slice `[1:4]` includes elements from index 1 to 3 (20, 30, 40).\n\n10. **Answer: B. `insert()`**\n    \n    **Explanation**: The `insert()` method is used to add an element at a specified index. `append()` adds to the end, `extend()` adds multiple elements, and `add()` is not a list method.\n```\n\nThis format should correctly render in Quarto, displaying both the questions and their answers in a structured and readable format.\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"markdown"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"output-file":"Lists.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","theme":"spacelab","title":"08 - LISTS"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}
{"title":"EXAM","markdown":{"yaml":{"title":"EXAM"},"headingText":"Questions from all the chapters!","containsRefs":false,"markdown":"\n\n\nThese questions are not sorted by chapter, so it will give you a more realistic experience for the test.\n\n\n\n1. **What does the `readlines()` method in file handling return?**\n   - A. The entire file content as a single string.\n   - B. The number of lines in the file.\n   - C. A list of strings, each representing a line in the file.\n   - D. The first line of the file only.\n\n<details>\n<summary>Click to see the answer</summary>\n\n**Answer:** C. A list of strings, each representing a line in the file.\n\n**Explanation:** The `readlines()` method reads all the lines in a file and returns them as a list of strings.\n</details>\n\n2. **How can you reverse the order of elements in a list `myList`?**\n   - A. `myList.sort(reverse=True)`\n   - B. `myList.reverse()`\n   - C. `reverse(myList)`\n   - D. `myList.reversed()`\n\n<details>\n<summary>Click to see the answer</summary>\n\n**Answer:** B. `myList.reverse()`\n\n**Explanation:** The `reverse()` method reverses the elements of the list `myList` in place.\n</details>\n\n3. **What will `dict.get('key')` return if 'key' does not exist in the dictionary `dict`?**\n   - A. KeyError\n   - B. None\n   - C. 0\n   - D. An empty string\n\n<details>\n<summary>Click to see the answer</summary>\n\n**Answer:** B. None\n\n**Explanation:** The `get()` method returns `None` if the specified key is not found in the dictionary.\n</details>\n\n4. **Which Pandas function is used to select data based on row and column labels?**\n   - A. `select()`\n   - B. `iloc[]`\n   - C. `loc[]`\n   - D. `filter()`\n\n<details>\n<summary>Click to see the answer</summary>\n\n**Answer:** C. `loc[]`\n\n**Explanation:** The `loc[]` function in Pandas is used to select data based on row and column labels.\n</details>\n\n5. **In the context of the Requests library, what does `raise_for_status()` do?**\n   - A. Increases the priority of the request.\n   - B. Raises an exception for unsuccessful status codes.\n   - C. Checks if the server status is active.\n   - D. Updates the status of the request.\n\n<details>\n<summary>Click to see the answer</summary>\n\n**Answer:** B. Raises an exception for unsuccessful status codes.\n\n**Explanation:** The `raise_for_status()` method in the Requests library raises an HTTPError exception for responses with HTTP error status codes (like 4xx or 5xx).\n</details>\n\n\n\n6. **What type of request does `requests.post(url)` send?**\n   - A. GET request\n   - B. POST request\n   - C. PUT request\n   - D. DELETE request\n\n<details>\n<summary>Click to see the answer</summary>\n\n**Answer:** B. POST request\n\n**Explanation:** The `requests.post(url)` function sends an HTTP POST request to the specified URL.\n</details>\n\n7. **What does `response.status_code` return in the `requests` library?**\n   - A. The response headers\n   - B. The URL of the request\n   - C. The status code of the HTTP response\n   - D. The body of the response\n\n<details>\n<summary>Click to see the answer</summary>\n\n**Answer:** C. The status code of the HTTP response\n\n**Explanation:** `response.status_code` returns the integer status code of the HTTP response (e.g., 200 for success, 404 for not found).\n</details>\n\n8. **What is the purpose of the `params` parameter in `requests.get(url, params=parameters)`?**\n   - A. To set the request headers\n   - B. To pass data in the request body\n   - C. To add query parameters to the URL\n   - D. To specify the HTTP method\n\n<details>\n<summary>Click to see the answer</summary>\n\n**Answer:** C. To add query parameters to the URL\n\n**Explanation:** The `params` parameter in `requests.get()` is used to append query parameters to the URL.\n</details>\n\n9. **How do you send a JSON payload with a POST request using the `requests` library?**\n   - A. `requests.post(url, data=json_data)`\n   - B. `requests.post(url, json=json_data)`\n   - C. `requests.post(url, params=json_data)`\n   - D. `requests.post(url, headers=json_data)`\n\n<details>\n<summary>Click to see the answer</summary>\n\n**Answer:** B. `requests.post(url, json=json_data)`\n\n**Explanation:** To send a JSON payload with a POST request, use the `json` parameter in the `requests.post()` function.\n</details>\n\n10. **How do you include custom headers in a request using the `requests` library?**\n   - A. `requests.get(url, data=headers)`\n   - B. `requests.get(url, json=headers)`\n   - C. `requests.get(url, headers=headers)`\n   - D. `requests.get(url, params=headers)`\n\n<details>\n<summary>Click to see the answer</summary>\n\n**Answer:** C. `requests.get(url, headers=headers)`\n\n**Explanation:** Custom headers are included in a request by using the `headers` parameter in the `requests.get()` or other request methods.\n</details>\n\n\nSure, here are five additional practice questions about API usage, formatted with interactive answers and explanations. The questions start at number 11 and end at 15.\n\n11. **How do you send a JSON payload with a POST request using the `requests` library?**\n   - A. `requests.post(url, data=json_data)`\n   - B. `requests.post(url, json=json_data)`\n   - C. `requests.post(url, params=json_data)`\n   - D. `requests.post(url, headers=json_data)`\n\n<details>\n<summary>Click to see the answer</summary>\n\n**Answer:** B. `requests.post(url, json=json_data)`\n\n**Explanation:** To send a JSON payload with a POST request, use the `json` parameter in the `requests.post()` function.\n</details>\n\n12. **Which HTTP method is typically used to delete a resource on the server?**\n   - A. GET\n   - B. POST\n   - C. PUT\n   - D. DELETE\n\n<details>\n<summary>Click to see the answer</summary>\n\n**Answer:** D. DELETE\n\n**Explanation:** The HTTP DELETE method is used to request the deletion of a resource identified by a URI.\n</details>\n\n13. **What is the typical use of the `params` argument in `requests.get()`?**\n   - A. To send data in the body of the request\n   - B. To set custom headers for the request\n   - C. To include query string parameters in the URL\n   - D. To specify the HTTP response format\n\n<details>\n<summary>Click to see the answer</summary>\n\n**Answer:** C. To include query string parameters in the URL\n\n**Explanation:** The `params` argument in `requests.get()` is used to append query parameters to the URL of the HTTP GET request.\n</details>\n\n14. **What will `response.raise_for_status()` do if the HTTP response status code is 404?**\n   - A. Return `None`\n   - B. Raise a `HTTPError` exception\n   - C. Print an error message\n   - D. Automatically retry the request\n\n<details>\n<summary>Click to see the answer</summary>\n\n**Answer:** B. Raise a `HTTPError` exception\n\n**Explanation:** `response.raise_for_status()` will raise an `HTTPError` exception for HTTP responses with error status codes like 404.\n</details>\n\n15. **Which function in the `requests` module is used to send an HTTP PUT request?**\n   - A. `requests.put()`\n   - B. `requests.get()`\n   - C. `requests.post()`\n   - D. `requests.delete()`\n\n<details>\n<summary>Click to see the answer</summary>\n\n**Answer:** A. `requests.put()`\n\n**Explanation:** The `requests.put()` function is used to send an HTTP PUT request to the specified URL.\n</details>\n\nCertainly! Here are practice questions for the specified functions, each followed by an interactive answer section:\n\n16. **What is the result of the following code using `open()` and `read()`?**\n   ```python\n   with open('example.txt', 'r') as file:\n       content = file.read()\n   ```\n   - A. Reads the entire content of 'example.txt'.\n   - B. Reads the first line of 'example.txt'.\n   - C. Opens 'example.txt' in write mode.\n   - D. Returns an error because the mode is not specified.\n\n<details>\n<summary>Click to see the answer</summary>\n\n**Answer:** A. Reads the entire content of 'example.txt'.\n\n**Explanation:** The `read()` method reads the entire content of the file when used with `open()` in 'r' (read) mode.\n</details>\n\n17. **What will the following code using `list.append()` output?**\n   ```python\n   myList = [1, 2, 3]\n   myList.append(4)\n   print(myList)\n   ```\n   - A. `[1, 2, 3, 4]`\n   - B. `[4, 1, 2, 3]`\n   - C. `[1, 2, 3]`\n   - D. An error message\n\n<details>\n<summary>Click to see the answer</summary>\n\n**Answer:** A. `[1, 2, 3, 4]`\n\n**Explanation:** The `append()` method adds an element to the end of the list.\n</details>\n\n18. **What does the following code using `dict.get()` return?**\n   ```python\n   myDict = {'a': 1, 'b': 2}\n   print(myDict.get('c', 'Not Found'))\n   ```\n   - A. `1`\n   - B. `2`\n   - C. `None`\n   - D. `'Not Found'`\n\n<details>\n<summary>Click to see the answer</summary>\n\n**Answer:** D. `'Not Found'`\n\n**Explanation:** The `get()` method returns the value for the key if it exists, otherwise it returns the default value provided, in this case, `'Not Found'`.\n</details>\n\n19. **What is the result of the following code using `requests.json()`?**\n   ```python\n   import requests\n   response = requests.get('https://httpbin.org/json')\n   data = response.json()\n   ```\n   - A. The entire HTTP response as a string.\n   - B. The status code of the response.\n   - C. A Python dictionary from the JSON response.\n   - D. The headers of the response.\n\n<details>\n<summary>Click to see the answer</summary>\n\n**Answer:** C. A Python dictionary from the JSON response.\n\n**Explanation:** The `json()` method of the `response` object parses the JSON response content and returns it as a Python dictionary.\n</details>\n\n20. **What will the following Pandas `DataFrame()` code create?**\n   ```python\n   import pandas as pd\n   data = {'Name': ['Alice', 'Bob'], 'Age': [25, 30]}\n   df = pd.DataFrame(data)\n   ```\n   - A. A DataFrame with two rows and two columns.\n   - B. A DataFrame with one row and two columns.\n   - C. A Series object.\n   - D. An empty DataFrame.\n\n<details>\n<summary>Click to see the answer</summary>\n\n**Answer:** A. A DataFrame with two rows and two columns.\n\n**Explanation:** The `DataFrame()` function creates a DataFrame object from the dictionary, with each key-value pair becoming a column in the DataFrame, resulting in two rows and two columns.\n</details>\n\nCertainly! Here are additional practice questions for the specified functions, starting from number 20, along with interactive answers:\n\n20. **What does the following code using `readlines()` output?**\n   ```python\n   with open('example.txt', 'r') as file:\n       lines = file.readlines()\n   print(len(lines))\n   ```\nAssuming 'example.txt' has 3 lines of text.\n\n   - A. The entire content of 'example.txt' as a single string.\n   - B. `3`\n   - C. A list containing the lines in 'example.txt'.\n   - D. The first line of 'example.txt' only.\n\n<details>\n<summary>Click to see the answer</summary>\n\n**Answer:** B. `3`\n\n**Explanation:** The `readlines()` method returns a list where each element is a line in the file, so `len(lines)` will be the number of lines in the file, which is 3 in this case.\n</details>\n\n21. **What will the following code using `list.count()` output?**\n   ```python\n   myList = [1, 2, 2, 3, 3, 3]\n   print(myList.count(3))\n   ```\n   - A. `1`\n   - B. `2`\n   - C. `3`\n   - D. `6`\n\n<details>\n<summary>Click to see the answer</summary>\n\n**Answer:** C. `3`\n\n**Explanation:** The `count()` method returns the number of occurrences of the specified element in the list. There are 3 occurrences of `3` in `myList`.\n</details>\n\n22. **What does the following code using `dict.values()` return?**\n   ```python\n   myDict = {'a': 1, 'b': 2, 'c': 3}\n   values = myDict.values()\n   print(values)\n   ```\n   - A. `['a', 'b', 'c']`\n   - B. `[1, 2, 3]`\n   - C. `{'a': 1, 'b': 2, 'c': 3}`\n   - D. `None`\n\n<details>\n<summary>Click to see the answer</summary>\n\n**Answer:** B. `[1, 2, 3]`\n\n**Explanation:** The `values()` method returns a view object that displays a list of all the values in the dictionary.\n</details>\n\n23. **What happens when `response.raise_for_status()` is executed if the HTTP response status code is 500?**\n   - A. Returns `None`\n   - B. Raises a `HTTPError` exception\n   - C. Prints the status code\n   - D. Nothing happens\n\n<details>\n<summary>Click to see the answer</summary>\n\n**Answer:** B. Raises a `HTTPError` exception\n\n**Explanation:** `response.raise_for_status()` will raise an `HTTPError` exception for HTTP responses with error status codes like 500.\n</details>\n\n24. **What will the following Pandas `to_records()` code produce?**\n   ```python\n   import pandas as pd\n   data = {'Name': ['Alice', 'Bob'], 'Age': [25, 30]}\n   df = pd.DataFrame(data)\n   records = df.to_records(index=False)\n   print(records)\n   ```\n   - A. A DataFrame with two rows and two columns.\n   - B. A list of tuples, each representing a row in the DataFrame.\n   - C. A NumPy record array representing the DataFrame.\n   - D. An error, as `to_records` is not a valid method.\n\n<details>\n<summary>Click to see the answer</summary>\n\n**Answer:** C. A NumPy record array representing the DataFrame.\n\n**Explanation:** The `to_records()` method converts the DataFrame into a NumPy record array. The `index=False` parameter excludes the index from the record array.\n</details>\n","srcMarkdownNoYaml":"\n\n## Questions from all the chapters!\n\nThese questions are not sorted by chapter, so it will give you a more realistic experience for the test.\n\n\n\n1. **What does the `readlines()` method in file handling return?**\n   - A. The entire file content as a single string.\n   - B. The number of lines in the file.\n   - C. A list of strings, each representing a line in the file.\n   - D. The first line of the file only.\n\n<details>\n<summary>Click to see the answer</summary>\n\n**Answer:** C. A list of strings, each representing a line in the file.\n\n**Explanation:** The `readlines()` method reads all the lines in a file and returns them as a list of strings.\n</details>\n\n2. **How can you reverse the order of elements in a list `myList`?**\n   - A. `myList.sort(reverse=True)`\n   - B. `myList.reverse()`\n   - C. `reverse(myList)`\n   - D. `myList.reversed()`\n\n<details>\n<summary>Click to see the answer</summary>\n\n**Answer:** B. `myList.reverse()`\n\n**Explanation:** The `reverse()` method reverses the elements of the list `myList` in place.\n</details>\n\n3. **What will `dict.get('key')` return if 'key' does not exist in the dictionary `dict`?**\n   - A. KeyError\n   - B. None\n   - C. 0\n   - D. An empty string\n\n<details>\n<summary>Click to see the answer</summary>\n\n**Answer:** B. None\n\n**Explanation:** The `get()` method returns `None` if the specified key is not found in the dictionary.\n</details>\n\n4. **Which Pandas function is used to select data based on row and column labels?**\n   - A. `select()`\n   - B. `iloc[]`\n   - C. `loc[]`\n   - D. `filter()`\n\n<details>\n<summary>Click to see the answer</summary>\n\n**Answer:** C. `loc[]`\n\n**Explanation:** The `loc[]` function in Pandas is used to select data based on row and column labels.\n</details>\n\n5. **In the context of the Requests library, what does `raise_for_status()` do?**\n   - A. Increases the priority of the request.\n   - B. Raises an exception for unsuccessful status codes.\n   - C. Checks if the server status is active.\n   - D. Updates the status of the request.\n\n<details>\n<summary>Click to see the answer</summary>\n\n**Answer:** B. Raises an exception for unsuccessful status codes.\n\n**Explanation:** The `raise_for_status()` method in the Requests library raises an HTTPError exception for responses with HTTP error status codes (like 4xx or 5xx).\n</details>\n\n\n\n6. **What type of request does `requests.post(url)` send?**\n   - A. GET request\n   - B. POST request\n   - C. PUT request\n   - D. DELETE request\n\n<details>\n<summary>Click to see the answer</summary>\n\n**Answer:** B. POST request\n\n**Explanation:** The `requests.post(url)` function sends an HTTP POST request to the specified URL.\n</details>\n\n7. **What does `response.status_code` return in the `requests` library?**\n   - A. The response headers\n   - B. The URL of the request\n   - C. The status code of the HTTP response\n   - D. The body of the response\n\n<details>\n<summary>Click to see the answer</summary>\n\n**Answer:** C. The status code of the HTTP response\n\n**Explanation:** `response.status_code` returns the integer status code of the HTTP response (e.g., 200 for success, 404 for not found).\n</details>\n\n8. **What is the purpose of the `params` parameter in `requests.get(url, params=parameters)`?**\n   - A. To set the request headers\n   - B. To pass data in the request body\n   - C. To add query parameters to the URL\n   - D. To specify the HTTP method\n\n<details>\n<summary>Click to see the answer</summary>\n\n**Answer:** C. To add query parameters to the URL\n\n**Explanation:** The `params` parameter in `requests.get()` is used to append query parameters to the URL.\n</details>\n\n9. **How do you send a JSON payload with a POST request using the `requests` library?**\n   - A. `requests.post(url, data=json_data)`\n   - B. `requests.post(url, json=json_data)`\n   - C. `requests.post(url, params=json_data)`\n   - D. `requests.post(url, headers=json_data)`\n\n<details>\n<summary>Click to see the answer</summary>\n\n**Answer:** B. `requests.post(url, json=json_data)`\n\n**Explanation:** To send a JSON payload with a POST request, use the `json` parameter in the `requests.post()` function.\n</details>\n\n10. **How do you include custom headers in a request using the `requests` library?**\n   - A. `requests.get(url, data=headers)`\n   - B. `requests.get(url, json=headers)`\n   - C. `requests.get(url, headers=headers)`\n   - D. `requests.get(url, params=headers)`\n\n<details>\n<summary>Click to see the answer</summary>\n\n**Answer:** C. `requests.get(url, headers=headers)`\n\n**Explanation:** Custom headers are included in a request by using the `headers` parameter in the `requests.get()` or other request methods.\n</details>\n\n\nSure, here are five additional practice questions about API usage, formatted with interactive answers and explanations. The questions start at number 11 and end at 15.\n\n11. **How do you send a JSON payload with a POST request using the `requests` library?**\n   - A. `requests.post(url, data=json_data)`\n   - B. `requests.post(url, json=json_data)`\n   - C. `requests.post(url, params=json_data)`\n   - D. `requests.post(url, headers=json_data)`\n\n<details>\n<summary>Click to see the answer</summary>\n\n**Answer:** B. `requests.post(url, json=json_data)`\n\n**Explanation:** To send a JSON payload with a POST request, use the `json` parameter in the `requests.post()` function.\n</details>\n\n12. **Which HTTP method is typically used to delete a resource on the server?**\n   - A. GET\n   - B. POST\n   - C. PUT\n   - D. DELETE\n\n<details>\n<summary>Click to see the answer</summary>\n\n**Answer:** D. DELETE\n\n**Explanation:** The HTTP DELETE method is used to request the deletion of a resource identified by a URI.\n</details>\n\n13. **What is the typical use of the `params` argument in `requests.get()`?**\n   - A. To send data in the body of the request\n   - B. To set custom headers for the request\n   - C. To include query string parameters in the URL\n   - D. To specify the HTTP response format\n\n<details>\n<summary>Click to see the answer</summary>\n\n**Answer:** C. To include query string parameters in the URL\n\n**Explanation:** The `params` argument in `requests.get()` is used to append query parameters to the URL of the HTTP GET request.\n</details>\n\n14. **What will `response.raise_for_status()` do if the HTTP response status code is 404?**\n   - A. Return `None`\n   - B. Raise a `HTTPError` exception\n   - C. Print an error message\n   - D. Automatically retry the request\n\n<details>\n<summary>Click to see the answer</summary>\n\n**Answer:** B. Raise a `HTTPError` exception\n\n**Explanation:** `response.raise_for_status()` will raise an `HTTPError` exception for HTTP responses with error status codes like 404.\n</details>\n\n15. **Which function in the `requests` module is used to send an HTTP PUT request?**\n   - A. `requests.put()`\n   - B. `requests.get()`\n   - C. `requests.post()`\n   - D. `requests.delete()`\n\n<details>\n<summary>Click to see the answer</summary>\n\n**Answer:** A. `requests.put()`\n\n**Explanation:** The `requests.put()` function is used to send an HTTP PUT request to the specified URL.\n</details>\n\nCertainly! Here are practice questions for the specified functions, each followed by an interactive answer section:\n\n16. **What is the result of the following code using `open()` and `read()`?**\n   ```python\n   with open('example.txt', 'r') as file:\n       content = file.read()\n   ```\n   - A. Reads the entire content of 'example.txt'.\n   - B. Reads the first line of 'example.txt'.\n   - C. Opens 'example.txt' in write mode.\n   - D. Returns an error because the mode is not specified.\n\n<details>\n<summary>Click to see the answer</summary>\n\n**Answer:** A. Reads the entire content of 'example.txt'.\n\n**Explanation:** The `read()` method reads the entire content of the file when used with `open()` in 'r' (read) mode.\n</details>\n\n17. **What will the following code using `list.append()` output?**\n   ```python\n   myList = [1, 2, 3]\n   myList.append(4)\n   print(myList)\n   ```\n   - A. `[1, 2, 3, 4]`\n   - B. `[4, 1, 2, 3]`\n   - C. `[1, 2, 3]`\n   - D. An error message\n\n<details>\n<summary>Click to see the answer</summary>\n\n**Answer:** A. `[1, 2, 3, 4]`\n\n**Explanation:** The `append()` method adds an element to the end of the list.\n</details>\n\n18. **What does the following code using `dict.get()` return?**\n   ```python\n   myDict = {'a': 1, 'b': 2}\n   print(myDict.get('c', 'Not Found'))\n   ```\n   - A. `1`\n   - B. `2`\n   - C. `None`\n   - D. `'Not Found'`\n\n<details>\n<summary>Click to see the answer</summary>\n\n**Answer:** D. `'Not Found'`\n\n**Explanation:** The `get()` method returns the value for the key if it exists, otherwise it returns the default value provided, in this case, `'Not Found'`.\n</details>\n\n19. **What is the result of the following code using `requests.json()`?**\n   ```python\n   import requests\n   response = requests.get('https://httpbin.org/json')\n   data = response.json()\n   ```\n   - A. The entire HTTP response as a string.\n   - B. The status code of the response.\n   - C. A Python dictionary from the JSON response.\n   - D. The headers of the response.\n\n<details>\n<summary>Click to see the answer</summary>\n\n**Answer:** C. A Python dictionary from the JSON response.\n\n**Explanation:** The `json()` method of the `response` object parses the JSON response content and returns it as a Python dictionary.\n</details>\n\n20. **What will the following Pandas `DataFrame()` code create?**\n   ```python\n   import pandas as pd\n   data = {'Name': ['Alice', 'Bob'], 'Age': [25, 30]}\n   df = pd.DataFrame(data)\n   ```\n   - A. A DataFrame with two rows and two columns.\n   - B. A DataFrame with one row and two columns.\n   - C. A Series object.\n   - D. An empty DataFrame.\n\n<details>\n<summary>Click to see the answer</summary>\n\n**Answer:** A. A DataFrame with two rows and two columns.\n\n**Explanation:** The `DataFrame()` function creates a DataFrame object from the dictionary, with each key-value pair becoming a column in the DataFrame, resulting in two rows and two columns.\n</details>\n\nCertainly! Here are additional practice questions for the specified functions, starting from number 20, along with interactive answers:\n\n20. **What does the following code using `readlines()` output?**\n   ```python\n   with open('example.txt', 'r') as file:\n       lines = file.readlines()\n   print(len(lines))\n   ```\nAssuming 'example.txt' has 3 lines of text.\n\n   - A. The entire content of 'example.txt' as a single string.\n   - B. `3`\n   - C. A list containing the lines in 'example.txt'.\n   - D. The first line of 'example.txt' only.\n\n<details>\n<summary>Click to see the answer</summary>\n\n**Answer:** B. `3`\n\n**Explanation:** The `readlines()` method returns a list where each element is a line in the file, so `len(lines)` will be the number of lines in the file, which is 3 in this case.\n</details>\n\n21. **What will the following code using `list.count()` output?**\n   ```python\n   myList = [1, 2, 2, 3, 3, 3]\n   print(myList.count(3))\n   ```\n   - A. `1`\n   - B. `2`\n   - C. `3`\n   - D. `6`\n\n<details>\n<summary>Click to see the answer</summary>\n\n**Answer:** C. `3`\n\n**Explanation:** The `count()` method returns the number of occurrences of the specified element in the list. There are 3 occurrences of `3` in `myList`.\n</details>\n\n22. **What does the following code using `dict.values()` return?**\n   ```python\n   myDict = {'a': 1, 'b': 2, 'c': 3}\n   values = myDict.values()\n   print(values)\n   ```\n   - A. `['a', 'b', 'c']`\n   - B. `[1, 2, 3]`\n   - C. `{'a': 1, 'b': 2, 'c': 3}`\n   - D. `None`\n\n<details>\n<summary>Click to see the answer</summary>\n\n**Answer:** B. `[1, 2, 3]`\n\n**Explanation:** The `values()` method returns a view object that displays a list of all the values in the dictionary.\n</details>\n\n23. **What happens when `response.raise_for_status()` is executed if the HTTP response status code is 500?**\n   - A. Returns `None`\n   - B. Raises a `HTTPError` exception\n   - C. Prints the status code\n   - D. Nothing happens\n\n<details>\n<summary>Click to see the answer</summary>\n\n**Answer:** B. Raises a `HTTPError` exception\n\n**Explanation:** `response.raise_for_status()` will raise an `HTTPError` exception for HTTP responses with error status codes like 500.\n</details>\n\n24. **What will the following Pandas `to_records()` code produce?**\n   ```python\n   import pandas as pd\n   data = {'Name': ['Alice', 'Bob'], 'Age': [25, 30]}\n   df = pd.DataFrame(data)\n   records = df.to_records(index=False)\n   print(records)\n   ```\n   - A. A DataFrame with two rows and two columns.\n   - B. A list of tuples, each representing a row in the DataFrame.\n   - C. A NumPy record array representing the DataFrame.\n   - D. An error, as `to_records` is not a valid method.\n\n<details>\n<summary>Click to see the answer</summary>\n\n**Answer:** C. A NumPy record array representing the DataFrame.\n\n**Explanation:** The `to_records()` method converts the DataFrame into a NumPy record array. The `index=False` parameter excludes the index from the record array.\n</details>\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"markdown"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"output-file":"PracticeExam.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","theme":"spacelab","title":"EXAM"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}
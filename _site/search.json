[
  {
    "objectID": "Lists.html",
    "href": "Lists.html",
    "title": "08 - LISTS",
    "section": "",
    "text": "Bert’s contempt for Lists knows no bounds!\n\n\n\n\nBert made a summary of the syntax for each of the Python list functions in the study guide:\n\nappend()\n\nAdds an element to the end of the list.\nSyntax: list.append(element)\n\nindex()\n\nReturns the index of the first occurrence of the specified element.\nSyntax: list.index(element, start, end)\nThe start and end parameters are optional and specify the search range.\n\ninsert()\n\nInserts an element at the specified position.\nSyntax: list.insert(index, element)\n\npop()\n\nRemoves and returns the element at the specified position.\nSyntax: list.pop(index)\nIf the index is not specified, pop() removes and returns the last element.\n\nremove()\n\nRemoves the first occurrence of the specified element.\nSyntax: list.remove(element)\n\nreverse()\n\nReverses the elements of the list in place.\nSyntax: list.reverse()\n\ncount()\n\nReturns the number of times the specified element appears in the list.\nSyntax: list.count(element)\n\n\n\n\n\n\n\n\n\n\n\nMutable: Lists in Python can be changed after they are created. This is in contrast to strings, which are immutable.\nSequence Type: A list is an ordered collection of items.\n\n\n\n\n\nIndexing: Access an individual element of a list using its index, e.g., list[0] for the first item.\nSlice Notation: Extract a subset of a list, e.g., list[start:stop] extracts elements from index start to stop-1.\n\n\n\n\n\nAdd: append(item) adds an item to the end, insert(index, item) adds an item at a specified index.\nRemove: remove(item) removes the first occurrence of an item.\nUpdate: Directly assign a new value to a list element, e.g., list[index] = new_value.\nFind: Use index(item) to find the index of the first occurrence of an item.\n\n\n\n\n\nEnumeration and Aggregates: Using loops to iterate over lists, and using functions like len(), max(), min() to aggregate data.\nList Mutation: Changing, adding, or removing elements in a list.\nCombining Lists: Use the + operator to concatenate two lists.\n\n\n\n\n\n\nFor x = [0,1,2,3,4,5], what is x[2:4]?\n\nA. [2,3]\nB. [1,2,3]\nC. [1,2]\nD. [2,3,4,5]\n\nHow do you add a new element at the end of a list named myList?\n\nA. myList.append(newElement)\nB. myList.insert(len(myList), newElement)\nC. myList.add(newElement)\nD. myList.put(newElement)\n\nWhich operation will combine two lists list1 and list2 into a new list list3?\n\nA. list3 = list1 + list2\nB. list3 = list1.append(list2)\nC. list3 = list1.extend(list2)\nD. list3 = combine(list1, list2)\n\nWhat does grades[:2] return if grades = ['A', 'B+','A','C+','B-']?\n\nA. [‘A’, ‘B+’]\nB. [‘B+’, ‘A’]\nC. [‘A’, ‘B+’, ‘A’]\nD. The first two characters of the first item in grades\n\nWhat is the result of the following operations on the list items = ['a','b','c','d']?\n\n\nA. [‘a’,‘b’,‘c’,‘d’, ‘w’]\nB. [‘a’,‘b’,‘d’, ‘w’]\nC. [‘x’, ‘b’, ‘d’, ‘w’]\nD. [‘i’,‘dont’,‘know’]\n\n\nWhat is the output of the following code?\nmyList = [4, 2, 8, 6]\nmyList[2] = 5\nprint(myList)\n\nA. [4, 2, 5, 6]\nB. [4, 2, 8, 5]\nC. [4, 5, 8, 6]\nD. [5, 2, 8, 6]\n\nWhat is the output of the following code?\nx = [\"apple\", \"banana\", \"cherry\"]\nx.remove(\"banana\")\nprint(x)\n\nA. [\"apple\", \"banana\"]\nB. [\"apple\", \"cherry\"]\nC. [\"banana\", \"cherry\"]\nD. [\"apple\", \"banana\", \"cherry\"]\n\nWhat will be the length of the list after executing the following code?\nx = [1, 2, 3, 4, 5]\nx.append(6)\nx.extend([7, 8])\n\nA. 5\nB. 6\nC. 8\nD. 10\n\nWhat is the result of the following list slicing operation?\nmyList = [10, 20, 30, 40, 50]\nprint(myList[1:4])\n\nA. [10, 20, 30]\nB. [20, 30, 40]\nC. [30, 40, 50]\nD. [20, 30, 40, 50]\n\nWhich method is used to add an element at a specific index in a list?\n\nA. append()\nB. insert()\nC. extend()\nD. add()\n\n\n\n\n\nAnswer: A. [2,3]\n\n\nExplanation: The slice x[2:4] extracts elements from index 2 up to but not including index 4, resulting in [2, 3].\n\n\nAnswer: A. myList.append(newElement)\n\n\nExplanation: append() is the correct method to add an element to the end of a list. The other options are either incorrect methods or overly complicated.\n\n\nAnswer: A. list3 = list1 + list2\n\n\nExplanation: The + operator concatenates two lists. append() and extend() methods modify the list in place and do not return a new list.\n\n\nAnswer: A. [‘A’, ‘B+’]\n\n\nExplanation: The slice grades[:2] returns the first two elements of the list, which are [‘A’, ‘B+’].\n\n\nAnswer: C. [‘x’, ‘b’, ‘d’, ‘w’]\n\n\nExplanation: After each operation, the list changes as follows:\n\nitems.append('w') -&gt; [‘a’,‘b’,‘c’,‘d’, ‘w’]\nitems.remove('c') -&gt; [‘a’,‘b’,‘d’, ‘w’]\nitems.insert(0,'x') -&gt; [‘x’, ‘a’, ‘b’, ‘d’, ‘w’]\nitems.pop(1) -&gt; [‘x’, ‘b’, ‘d’, ‘w’]\n\n\n\nAnswer: A. [4, 2, 5, 6]\nExplanation: The code changes the element at index 2 (third element) from 8 to 5.\nAnswer: B. [\"apple\", \"cherry\"]\nExplanation: The remove() method removes the first occurrence of the element “banana” from the list.\nAnswer: C. 8\nExplanation: The append() method adds one element, and extend() adds three more elements, making the total length 8.\nAnswer: B. [20, 30, 40]\nExplanation: The slice [1:4] includes elements from index 1 to 3 (20, 30, 40).\nAnswer: B. insert()\nExplanation: The insert() method is used to add an element at a specified index. append() adds to the end, extend() adds multiple elements, and add() is not a list method. ```\n\nThis format should correctly render in Quarto, displaying both the questions and their answers in a structured and readable format."
  },
  {
    "objectID": "Lists.html#key-concepts",
    "href": "Lists.html#key-concepts",
    "title": "08 - LISTS",
    "section": "",
    "text": "Mutable: Lists in Python can be changed after they are created. This is in contrast to strings, which are immutable.\nSequence Type: A list is an ordered collection of items.\n\n\n\n\n\nIndexing: Access an individual element of a list using its index, e.g., list[0] for the first item.\nSlice Notation: Extract a subset of a list, e.g., list[start:stop] extracts elements from index start to stop-1.\n\n\n\n\n\nAdd: append(item) adds an item to the end, insert(index, item) adds an item at a specified index.\nRemove: remove(item) removes the first occurrence of an item.\nUpdate: Directly assign a new value to a list element, e.g., list[index] = new_value.\nFind: Use index(item) to find the index of the first occurrence of an item.\n\n\n\n\n\nEnumeration and Aggregates: Using loops to iterate over lists, and using functions like len(), max(), min() to aggregate data.\nList Mutation: Changing, adding, or removing elements in a list.\nCombining Lists: Use the + operator to concatenate two lists."
  },
  {
    "objectID": "Lists.html#multiple-choice-questions",
    "href": "Lists.html#multiple-choice-questions",
    "title": "08 - LISTS",
    "section": "",
    "text": "For x = [0,1,2,3,4,5], what is x[2:4]?\n\nA. [2,3]\nB. [1,2,3]\nC. [1,2]\nD. [2,3,4,5]\n\nHow do you add a new element at the end of a list named myList?\n\nA. myList.append(newElement)\nB. myList.insert(len(myList), newElement)\nC. myList.add(newElement)\nD. myList.put(newElement)\n\nWhich operation will combine two lists list1 and list2 into a new list list3?\n\nA. list3 = list1 + list2\nB. list3 = list1.append(list2)\nC. list3 = list1.extend(list2)\nD. list3 = combine(list1, list2)\n\nWhat does grades[:2] return if grades = ['A', 'B+','A','C+','B-']?\n\nA. [‘A’, ‘B+’]\nB. [‘B+’, ‘A’]\nC. [‘A’, ‘B+’, ‘A’]\nD. The first two characters of the first item in grades\n\nWhat is the result of the following operations on the list items = ['a','b','c','d']?\n\n\nA. [‘a’,‘b’,‘c’,‘d’, ‘w’]\nB. [‘a’,‘b’,‘d’, ‘w’]\nC. [‘x’, ‘b’, ‘d’, ‘w’]\nD. [‘i’,‘dont’,‘know’]\n\n\nWhat is the output of the following code?\nmyList = [4, 2, 8, 6]\nmyList[2] = 5\nprint(myList)\n\nA. [4, 2, 5, 6]\nB. [4, 2, 8, 5]\nC. [4, 5, 8, 6]\nD. [5, 2, 8, 6]\n\nWhat is the output of the following code?\nx = [\"apple\", \"banana\", \"cherry\"]\nx.remove(\"banana\")\nprint(x)\n\nA. [\"apple\", \"banana\"]\nB. [\"apple\", \"cherry\"]\nC. [\"banana\", \"cherry\"]\nD. [\"apple\", \"banana\", \"cherry\"]\n\nWhat will be the length of the list after executing the following code?\nx = [1, 2, 3, 4, 5]\nx.append(6)\nx.extend([7, 8])\n\nA. 5\nB. 6\nC. 8\nD. 10\n\nWhat is the result of the following list slicing operation?\nmyList = [10, 20, 30, 40, 50]\nprint(myList[1:4])\n\nA. [10, 20, 30]\nB. [20, 30, 40]\nC. [30, 40, 50]\nD. [20, 30, 40, 50]\n\nWhich method is used to add an element at a specific index in a list?\n\nA. append()\nB. insert()\nC. extend()\nD. add()\n\n\n\n\n\nAnswer: A. [2,3]\n\n\nExplanation: The slice x[2:4] extracts elements from index 2 up to but not including index 4, resulting in [2, 3].\n\n\nAnswer: A. myList.append(newElement)\n\n\nExplanation: append() is the correct method to add an element to the end of a list. The other options are either incorrect methods or overly complicated.\n\n\nAnswer: A. list3 = list1 + list2\n\n\nExplanation: The + operator concatenates two lists. append() and extend() methods modify the list in place and do not return a new list.\n\n\nAnswer: A. [‘A’, ‘B+’]\n\n\nExplanation: The slice grades[:2] returns the first two elements of the list, which are [‘A’, ‘B+’].\n\n\nAnswer: C. [‘x’, ‘b’, ‘d’, ‘w’]\n\n\nExplanation: After each operation, the list changes as follows:\n\nitems.append('w') -&gt; [‘a’,‘b’,‘c’,‘d’, ‘w’]\nitems.remove('c') -&gt; [‘a’,‘b’,‘d’, ‘w’]\nitems.insert(0,'x') -&gt; [‘x’, ‘a’, ‘b’, ‘d’, ‘w’]\nitems.pop(1) -&gt; [‘x’, ‘b’, ‘d’, ‘w’]\n\n\n\nAnswer: A. [4, 2, 5, 6]\nExplanation: The code changes the element at index 2 (third element) from 8 to 5.\nAnswer: B. [\"apple\", \"cherry\"]\nExplanation: The remove() method removes the first occurrence of the element “banana” from the list.\nAnswer: C. 8\nExplanation: The append() method adds one element, and extend() adds three more elements, making the total length 8.\nAnswer: B. [20, 30, 40]\nExplanation: The slice [1:4] includes elements from index 1 to 3 (20, 30, 40).\nAnswer: B. insert()\nExplanation: The insert() method is used to add an element at a specified index. append() adds to the end, extend() adds multiple elements, and add() is not a list method. ```\n\nThis format should correctly render in Quarto, displaying both the questions and their answers in a structured and readable format."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n2"
  },
  {
    "objectID": "Files.html",
    "href": "Files.html",
    "title": "07 - FILES",
    "section": "",
    "text": "Babe says that files are persistent storage!\n\n\n\n\nHere’s a summary of the syntax for the specified Python file functions:\n\nopen()\n\nOpens a file and returns a file object.\nSyntax: open(file, mode='r', buffering=-1, encoding=None, errors=None, newline=None, closefd=True, opener=None)\nThe mode parameter specifies the mode in which the file is opened (‘r’ for reading, ‘w’ for writing, etc.).\nOther parameters like encoding, errors, and newline are optional and allow further customization of file handling.\n\nread()\n\nReads the entire file or a specified number of characters from the file.\nSyntax: file.read(size=-1)\nsize is an optional parameter that specifies the number of characters to read. If omitted or negative, the entire content of the file will be read.\n\nreadlines()\n\nReads the entire file and returns a list of strings, each representing one line of the file.\nSyntax: file.readlines(hint=-1)\nThe hint parameter is optional and can be used to control the number of lines read. If the total number of characters read is approximately hint, reading stops.\n\nwrite()\n\nWrites a specified string to the file.\nSyntax: file.write(string)\nThis function writes the string to the file, returning the number of characters written.\n\n\n\n\n\n\n\n\n\n\n\nPersistence Layer: Files allow for data storage beyond the runtime of a program.\nFile Operations: Mainly include reading from and writing to files.\nFile Handle: A variable created by opening a file, used to perform operations on the file.\n\n\n\n\n\nTwo Methods:\n\nRead All at Once: Using handle.read() inside a with open(filename, 'r') as handle block.\nRead Line by Line: Looping over handle.readlines() to process each line individually.\n\n\n\n\n\n\nWrite Mode ('w'): Overwrites the file or creates a new one if it doesn’t exist.\nAppend Mode ('a'): Adds content to the end of the file without overwriting existing content.\n\n\n\n\n\nRelative Path: Specifies a file location relative to the current directory.\nAbsolute Path: Specifies the exact file location on the filesystem from the root directory.\n\n\n\n\n\nTry-Except Block: Essential for handling I/O operations to manage exceptions like FileNotFoundError.\n\n\n\n\n\nExamples: Programs that save text messages, read and calculate average grades, calorie lookups in a data file, and a spell checker.\n\n\n\n\n\n\nWhat does with open(file,'w') as f do in a Python script?\n\nA. Opens the file in write mode and creates a file handle named f.\nB. Opens the file in read mode and creates a file handle named f.\nC. Deletes the file and creates a new empty file.\nD. Reads the entire content of the file into f.\n\nIn file handling, what is the purpose of the try...except block?\n\nA. To check if a file exists before trying to open it.\nB. To ensure that a file is closed after reading or writing.\nC. To handle errors that occur during file operations.\nD. To improve the performance of file reading/writing.\n\nWhich of the following is not an example of secondary (persistent) memory?\n\nA. Flash Memory\nB. Hard Disk Drive (HDD)\nC. Random-Access Memory (RAM)\nD. Solid State Disk (SSD)\n\nWhat is wrong with the following code: with open(file,'w'): file.write(\"Hello\")?\n\nA. No file handle\nB. Cannot write - file opened for reading\nC. File a.txt does not exist\nD. Nothing is wrong!\n\nWhen is an absolute path required in file handling in Python?\n\nA. When the file is in the current working directory.\nB. When the file is in a different directory than the current one.\nC. Only when the file is on a different physical drive.\nD. Absolute paths are never required in Python.\n\n\n\n\n\n\nAnswer: A. Opens the file in write mode and creates a file handle named f.\n\nExplanation: The with open() statement opens a file in the specified mode (‘w’ for write in this case) and assigns a handle (f) for file operations.\n\nAnswer: C. To handle errors that occur during file operations.\n\nExplanation: The try...except block is used to catch and handle exceptions, like FileNotFoundError, that might occur during file operations.\n\nAnswer: C. Random-Access Memory (RAM)\n\nExplanation: RAM is a type of primary memory, not secondary (persistent) memory. Flash Memory, HDD, and SSD are examples of secondary memory.\n\nAnswer: A. No file handle\n\nExplanation: The correct syntax should be with open(file,'w') as f: f.write(\"Hello\"). The file handle (f) is missing in the given code.\n\nAnswer: B. When the file is in a different directory than the current one.\n\nExplanation: Absolute paths are needed when accessing files that are not in the current working directory."
  },
  {
    "objectID": "Files.html#key-concepts",
    "href": "Files.html#key-concepts",
    "title": "07 - FILES",
    "section": "",
    "text": "Persistence Layer: Files allow for data storage beyond the runtime of a program.\nFile Operations: Mainly include reading from and writing to files.\nFile Handle: A variable created by opening a file, used to perform operations on the file.\n\n\n\n\n\nTwo Methods:\n\nRead All at Once: Using handle.read() inside a with open(filename, 'r') as handle block.\nRead Line by Line: Looping over handle.readlines() to process each line individually.\n\n\n\n\n\n\nWrite Mode ('w'): Overwrites the file or creates a new one if it doesn’t exist.\nAppend Mode ('a'): Adds content to the end of the file without overwriting existing content.\n\n\n\n\n\nRelative Path: Specifies a file location relative to the current directory.\nAbsolute Path: Specifies the exact file location on the filesystem from the root directory.\n\n\n\n\n\nTry-Except Block: Essential for handling I/O operations to manage exceptions like FileNotFoundError.\n\n\n\n\n\nExamples: Programs that save text messages, read and calculate average grades, calorie lookups in a data file, and a spell checker."
  },
  {
    "objectID": "Files.html#practice-questions",
    "href": "Files.html#practice-questions",
    "title": "07 - FILES",
    "section": "",
    "text": "What does with open(file,'w') as f do in a Python script?\n\nA. Opens the file in write mode and creates a file handle named f.\nB. Opens the file in read mode and creates a file handle named f.\nC. Deletes the file and creates a new empty file.\nD. Reads the entire content of the file into f.\n\nIn file handling, what is the purpose of the try...except block?\n\nA. To check if a file exists before trying to open it.\nB. To ensure that a file is closed after reading or writing.\nC. To handle errors that occur during file operations.\nD. To improve the performance of file reading/writing.\n\nWhich of the following is not an example of secondary (persistent) memory?\n\nA. Flash Memory\nB. Hard Disk Drive (HDD)\nC. Random-Access Memory (RAM)\nD. Solid State Disk (SSD)\n\nWhat is wrong with the following code: with open(file,'w'): file.write(\"Hello\")?\n\nA. No file handle\nB. Cannot write - file opened for reading\nC. File a.txt does not exist\nD. Nothing is wrong!\n\nWhen is an absolute path required in file handling in Python?\n\nA. When the file is in the current working directory.\nB. When the file is in a different directory than the current one.\nC. Only when the file is on a different physical drive.\nD. Absolute paths are never required in Python.\n\n\n\n\n\n\nAnswer: A. Opens the file in write mode and creates a file handle named f.\n\nExplanation: The with open() statement opens a file in the specified mode (‘w’ for write in this case) and assigns a handle (f) for file operations.\n\nAnswer: C. To handle errors that occur during file operations.\n\nExplanation: The try...except block is used to catch and handle exceptions, like FileNotFoundError, that might occur during file operations.\n\nAnswer: C. Random-Access Memory (RAM)\n\nExplanation: RAM is a type of primary memory, not secondary (persistent) memory. Flash Memory, HDD, and SSD are examples of secondary memory.\n\nAnswer: A. No file handle\n\nExplanation: The correct syntax should be with open(file,'w') as f: f.write(\"Hello\"). The file handle (f) is missing in the given code.\n\nAnswer: B. When the file is in a different directory than the current one.\n\nExplanation: Absolute paths are needed when accessing files that are not in the current working directory."
  },
  {
    "objectID": "PracticeExam.html",
    "href": "PracticeExam.html",
    "title": "Practice the things!",
    "section": "",
    "text": "These questions are not sorted by chapter, so it will give you a more realistic experience for the test."
  },
  {
    "objectID": "PracticeExam.html#questions-from-all-the-chapters",
    "href": "PracticeExam.html#questions-from-all-the-chapters",
    "title": "Practice the things!",
    "section": "",
    "text": "These questions are not sorted by chapter, so it will give you a more realistic experience for the test."
  },
  {
    "objectID": "PracticeExam.html#practice-questions",
    "href": "PracticeExam.html#practice-questions",
    "title": "Practice the things!",
    "section": "Practice Questions",
    "text": "Practice Questions\n\nWhat does the readlines() method in file handling return?\n\nA. The entire file content as a single string.\nB. The number of lines in the file.\nC. A list of strings, each representing a line in the file.\nD. The first line of the file only.\n\nHow can you reverse the order of elements in a list myList?\n\nA. myList.sort(reverse=True)\nB. myList.reverse()\nC. reverse(myList)\nD. myList.reversed()\n\nWhat will dict.get('key') return if ‘key’ does not exist in the dictionary dict?\n\nA. KeyError\nB. None\nC. 0\nD. An empty string\n\nWhich Pandas function is used to select data based on row and column labels?\n\nA. select()\nB. iloc[]\nC. loc[]\nD. filter()\n\nIn the context of the Requests library, what does raise_for_status() do?\n\nA. Increases the priority of the request.\nB. Raises an exception for unsuccessful status codes.\nC. Checks if the server status is active.\nD. Updates the status of the request."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "LOVEY’S SUPER PYTHON STUDY GUIDE!",
    "section": "",
    "text": "Lovey is intrigued by Python!\n\n\n\n\n\nReview Readings and Lectures: Focus on key terms like “def” or “infinite loop”.\nUnderstand Code Application: Know how to write and interpret Python code, especially for file handling, lists, dictionaries, requests, and pandas.\nPractice with Examples: Use the FEQT from large group sessions as a model for exam questions.\nGroup Study: Discuss and quiz each other on key concepts and potential exam questions.\nNote Sheet: Prepare a comprehensive 8.5x11 sheet with crucial notes and summaries."
  },
  {
    "objectID": "index.html#key-concepts",
    "href": "index.html#key-concepts",
    "title": "LOVEY’S SUPER PYTHON STUDY GUIDE!",
    "section": "Key Concepts",
    "text": "Key Concepts\n\nUnit 07: File Handling\n\nOpen and Read Files: Using open(), read(), readlines() for accessing file contents.\nWrite to Files: Using write() to create or modify files.\nClosing Files: Importance of closing files or using with statement for automatic closure.\n\n\n\nUnit 08: Lists\n\nMutable Sequence Types: Understanding that lists can be changed after creation.\nList Operations: append(), index(), insert(), pop(), remove(), reverse(), count().\nIndexing and Slicing: Accessing elements using indices and slicing for sublists.\n\n\n\nUnit 09: Dictionaries\n\nKey-Value Pairs: Understanding the structure of dictionaries.\nDictionary Functions: keys(), values(), get() for accessing dictionary elements.\n\n\n\nUnit 10: HTTP\n\nMaking HTTP Requests: Using requests.get() to make GET requests.\nHandling JSON: Using json() for parsing JSON responses.\nQuery Parameters: Understanding and using query strings/params in requests.\n\n\n\nUnit 11: APIs\n\n\nUnit 12: Pandas Library\n\nDataFrames and Series: Understanding the basic structures in Pandas.\nReading Data: Using read_csv() for reading CSV files.\nData Selection: Using loc, iloc for row/column selection and filters.\nData Conversion: Converting data using to_records()."
  },
  {
    "objectID": "Dictionaries.html",
    "href": "Dictionaries.html",
    "title": "09 - DICTIONARIES",
    "section": "",
    "text": "Here is a Dictionary of dog emotions:\n{“Boris”: “mild confusion”, “Bert”: “cape fueled rage”}\n\n\n\n\nBoris made a summary of the syntax for each of the Python dictionary functions in the study guide:\n\nkeys()\n\nReturns a view object displaying a list of all the keys in the dictionary.\nSyntax: dictionary.keys()\n\nvalues()\n\nReturns a view object containing a list of all the values in the dictionary.\nSyntax: dictionary.values()\n\nget()\n\nReturns the value for the specified key if the key is in the dictionary.\nSyntax: dictionary.get(key, default)\nThe default parameter is optional and provides a value to return if the key is not found. If not provided, it defaults to None.\n\n\n\n\n\n\n\n\n\n\n\nKey-Value Pairs: Dictionaries store data as key-value pairs.\nMutability: Python dictionaries are mutable, meaning their values can be changed after creation.\nAccessing Values: Values in a dictionary are accessed via keys, not indices (e.g., dict[key]).\n\n\n\n\n\nCreating a Dictionary: Dictionaries are created with curly braces {} or the dict() constructor.\nUpdating Values: Change the value of an item by referencing its key (e.g., dict[key] = new_value).\nHandling KeyError: Occurs when a key is not found in the dictionary.\n\n\n\n\n\nUseful Methods: get(), keys(), values(), del for deleting a key.\nHandling KeyError with get(): Avoids an error by returning None if the key is not found.\n\n\n\n\n\nWhen to Use: Lists are for collections of similar items; dictionaries are for storing records with different types of information.\n\n\n\n\n\nRepresenting Complex Data Structures: Useful for storing multiple records (e.g., a list of student records).\nAccessing Data: Chaining indices and keys (e.g., students[0]['Name']).\n\n\n\n\n\nJSON: A standard format for data interchange, closely resembling Python dictionaries.\nSerializing and Deserializing: Converting between JSON strings and Python dictionaries.\nPython’s json Module: Used for loading and saving dictionaries to and from JSON.\n\n\n\n\n\n\nWhat is the value returned by font.get('Size') if font is a dictionary defined as font = {'Name': 'Arial'}?\n\nA. None\nB. KeyError\nC. 0\nD. 'Arial'\n\nWhat does the following code do? x['new_key'] = 'new_value' assuming x is a dictionary?\n\nA. Throws an error because ‘new_key’ does not exist.\nB. Adds a new key-value pair to the dictionary.\nC. Changes the value of an existing key.\nD. Does nothing to the dictionary.\n\nIf student = {'Name': 'John', 'Age': 21}, what will student['Age'] = 22 do?\n\nA. Adds a new key ‘Age’ with the value 22.\nB. Changes the value of the ‘Age’ key to 22.\nC. Throws a KeyError.\nD. Creates a new dictionary with ‘Age’ set to 22.\n\nIn the context of dictionaries, what does the del keyword do?\n\nA. Deletes the entire dictionary.\nB. Deletes a specified key-value pair.\nC. Deletes the value of a specified key.\nD. Clears all values leaving an empty dictionary.\n\nWhat is the result of len(s) where s = [{'a': 1}, {'b': 2}, {'c': 3}]?\n\nA. 3\nB. 6\nC. 2\nD. 9\n\n\n\n\n\n\nAnswer: A. None\n\nExplanation: The get() method returns None if the key is not found in the dictionary.\n\nAnswer: B. Adds a new key-value pair to the dictionary.\n\nExplanation: If the key does not exist, it adds the key-value pair to the dictionary.\n\nAnswer: B. Changes the value of the ‘Age’ key to 22.\n\nExplanation: Since the ‘Age’ key exists, it updates its value to 22.\n\nAnswer: B. Deletes a specified key-value pair.\n\nExplanation: The del keyword removes a specific key-value pair from a dictionary.\n\nAnswer: A. 3\n\nExplanation: The len() function returns the number of items (dictionaries in this case) in the list s, which is 3."
  },
  {
    "objectID": "Dictionaries.html#key-concepts",
    "href": "Dictionaries.html#key-concepts",
    "title": "09 - DICTIONARIES",
    "section": "",
    "text": "Key-Value Pairs: Dictionaries store data as key-value pairs.\nMutability: Python dictionaries are mutable, meaning their values can be changed after creation.\nAccessing Values: Values in a dictionary are accessed via keys, not indices (e.g., dict[key]).\n\n\n\n\n\nCreating a Dictionary: Dictionaries are created with curly braces {} or the dict() constructor.\nUpdating Values: Change the value of an item by referencing its key (e.g., dict[key] = new_value).\nHandling KeyError: Occurs when a key is not found in the dictionary.\n\n\n\n\n\nUseful Methods: get(), keys(), values(), del for deleting a key.\nHandling KeyError with get(): Avoids an error by returning None if the key is not found.\n\n\n\n\n\nWhen to Use: Lists are for collections of similar items; dictionaries are for storing records with different types of information.\n\n\n\n\n\nRepresenting Complex Data Structures: Useful for storing multiple records (e.g., a list of student records).\nAccessing Data: Chaining indices and keys (e.g., students[0]['Name']).\n\n\n\n\n\nJSON: A standard format for data interchange, closely resembling Python dictionaries.\nSerializing and Deserializing: Converting between JSON strings and Python dictionaries.\nPython’s json Module: Used for loading and saving dictionaries to and from JSON."
  },
  {
    "objectID": "Dictionaries.html#practice-questions",
    "href": "Dictionaries.html#practice-questions",
    "title": "09 - DICTIONARIES",
    "section": "",
    "text": "What is the value returned by font.get('Size') if font is a dictionary defined as font = {'Name': 'Arial'}?\n\nA. None\nB. KeyError\nC. 0\nD. 'Arial'\n\nWhat does the following code do? x['new_key'] = 'new_value' assuming x is a dictionary?\n\nA. Throws an error because ‘new_key’ does not exist.\nB. Adds a new key-value pair to the dictionary.\nC. Changes the value of an existing key.\nD. Does nothing to the dictionary.\n\nIf student = {'Name': 'John', 'Age': 21}, what will student['Age'] = 22 do?\n\nA. Adds a new key ‘Age’ with the value 22.\nB. Changes the value of the ‘Age’ key to 22.\nC. Throws a KeyError.\nD. Creates a new dictionary with ‘Age’ set to 22.\n\nIn the context of dictionaries, what does the del keyword do?\n\nA. Deletes the entire dictionary.\nB. Deletes a specified key-value pair.\nC. Deletes the value of a specified key.\nD. Clears all values leaving an empty dictionary.\n\nWhat is the result of len(s) where s = [{'a': 1}, {'b': 2}, {'c': 3}]?\n\nA. 3\nB. 6\nC. 2\nD. 9\n\n\n\n\n\n\nAnswer: A. None\n\nExplanation: The get() method returns None if the key is not found in the dictionary.\n\nAnswer: B. Adds a new key-value pair to the dictionary.\n\nExplanation: If the key does not exist, it adds the key-value pair to the dictionary.\n\nAnswer: B. Changes the value of the ‘Age’ key to 22.\n\nExplanation: Since the ‘Age’ key exists, it updates its value to 22.\n\nAnswer: B. Deletes a specified key-value pair.\n\nExplanation: The del keyword removes a specific key-value pair from a dictionary.\n\nAnswer: A. 3\n\nExplanation: The len() function returns the number of items (dictionaries in this case) in the list s, which is 3."
  }
]